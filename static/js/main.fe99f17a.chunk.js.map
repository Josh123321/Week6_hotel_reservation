{"version":3,"sources":["images/index_icon/instagram-brands.svg","images/index_icon/facebook-square-brands.svg","images/index_icon/home-solid.svg","images/index_icon/envelope-solid.svg","images/index_icon/phone-alt-solid.svg","util/request.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GetResquest","url","params","axios","create","baseURL","method","headers","get","ContainerWrapper","styled","div","TopWrapper","props","imageUrl","Logo","HotelInfoWrapper","BrandGroup","InfoGroup","Informtion","p","MainWrapper","InfoWrapper","RoomDescription","RoomInfo","name","price","holidayPrice","src","alt","App","useState","roomItems","setRoomItem","useEffect","length","then","response","console","log","data","success","items","instagram","facebook","home","envelope","phone","map","item","index","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0HAAAA,EAAOC,QAAU,IAA0B,8C,mBCA3CD,EAAOC,QAAU,IAA0B,oD,mBCA3CD,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,4C,mBCA3CD,EAAOC,QAAU,IAA0B,6C,mLCI9BC,EAAc,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,IAAgB,EAAZC,OAM7B,OALiBC,IAAMC,OAAO,CAC1BC,QAAQJ,EACRK,OAAO,MACPC,QAAS,CAAC,+BANJ,mEAQMC,O,iuECApB,IAAMC,EAAmBC,IAAOC,IAAV,KAIhBC,EAAaF,IAAOC,IAAV,IAKK,SAAAE,GAAK,oBAAWA,EAAMC,SAAjB,OAUpBC,EAAOL,IAAOC,IAAV,KAaJK,EAAmBN,IAAOC,IAAV,KAUhBM,EAAaP,IAAOC,IAAV,KAcVO,EAAYR,IAAOC,IAAV,KAaTQ,EAAaT,IAAOU,EAAV,KAOVC,EAAcX,IAAOC,IAAV,KAWXW,EAAcZ,IAAOC,IAAV,KAWXY,EAAkBb,IAAOC,IAAV,KAKfa,EAAW,SAAC,GAA6C,IAA3CV,EAA0C,EAA1CA,SAAUW,EAAgC,EAAhCA,KAAgC,EAA1BC,MAA0B,EAAnBC,aACzC,OACE,kBAACL,EAAD,KACE,yBAAKM,IAAKd,EAAUe,IAAKJ,IACzB,kBAACF,EAAD,KAAkBE,KA4DTK,MApDf,WAAgB,IAAD,EACoBC,mBAAS,IAD7B,mBACNC,EADM,KACKC,EADL,OAEuBF,mBAAS,GAFhC,mBAkBb,OAlBa,UAGbG,oBAAU,WACiB,IAArBF,EAAUG,QACZnC,EAAY,CAAE,IAAO,6DAA8DoC,KAAK,SAACC,GACvFC,QAAQC,IAAIF,GACRA,EAASG,KAAKC,SAChBR,EAAYI,EAASG,KAAKE,WAWhC,kBAACjC,EAAD,KACE,kBAACG,EAAD,CAAYE,SAAUkB,EAAUG,OAAS,GAAKH,EAAU,GAAGlB,UACzD,kBAACC,EAAD,oBACA,kBAACC,EAAD,KACE,kBAACC,EAAD,KACE,yBAAKW,IAAKe,MACV,yBAAKf,IAAKgB,OAGZ,kBAAC1B,EAAD,KACI,kBAACC,EAAD,KAAY,yBAAKS,IAAKiB,MAAtB,IAA+B,8CAC/B,kBAAC1B,EAAD,KAAY,yBAAKS,IAAKkB,MAAY,+DAClC,kBAAC3B,EAAD,KAAY,yBAAKS,IAAKmB,MAAS,oGAOvC,kBAAC1B,EAAD,KAEIW,EAAUgB,IAAI,SAACC,EAAMC,GACnB,OACE,kBAAC,EAAD,CAAUC,IAAKD,EAAOpC,SAAUmC,EAAKnC,SAAUW,KAAMwB,EAAKxB,YC3JpD2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC,iB","file":"static/js/main.fe99f17a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/instagram-brands.cc5e92b0.svg\";","module.exports = __webpack_public_path__ + \"static/media/facebook-square-brands.7df7570f.svg\";","module.exports = __webpack_public_path__ + \"static/media/home-solid.1600889c.svg\";","module.exports = __webpack_public_path__ + \"static/media/envelope-solid.a1b1533c.svg\";","module.exports = __webpack_public_path__ + \"static/media/phone-alt-solid.6dbf65e5.svg\";","import axios from 'axios';\r\n\r\nconst token = \"kqoMBhngq2U84mW7pean3h9X2PlPZTToRbVX3SyLcrKq7roKzq3ab6U1T6xJ\";\r\n\r\nexport const GetResquest = ({url,params}) => {\r\n    const instance = axios.create({\r\n        baseURL:url,\r\n        method:'get',\r\n        headers: {\"Authorization\" : `Bearer ${token}`}\r\n    })\r\n    return instance.get();\r\n}","import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { GetResquest } from './util/request';\r\nimport instagram from './images/index_icon/instagram-brands.svg';\r\nimport facebook from './images/index_icon/facebook-square-brands.svg';\r\nimport home from './images/index_icon/home-solid.svg';\r\nimport envelope from './images/index_icon/envelope-solid.svg';\r\nimport phone from './images/index_icon/phone-alt-solid.svg';\r\n\r\n\r\nconst ContainerWrapper = styled.div`\r\n\r\n`;\r\n\r\nconst TopWrapper = styled.div`\r\n  position:relative;\r\n  display:flex;\r\n  flex-direction:column;\r\n  opacity:0.64;\r\n  background-image:${props => `url(${props.imageUrl})`};\r\n  justify-content:center;\r\n  width:100%;\r\n  height:80vh;\r\n  background-attachment: fixed;\r\n  background-position: center;\r\n  background-size: cover;\r\n  align-items:center;\r\n`;\r\n\r\nconst Logo = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    border: 2px solid #FFFFFFFF;\r\n    background: rgba(255,255,255,0.30);\r\n    color: #FFFFFFFF;\r\n    font-size: 31px;\r\n    height: 148px;\r\n    width: 148px;\r\n    text-align: center;\r\n    font-weight: 500;\r\n`;\r\n\r\nconst HotelInfoWrapper = styled.div`\r\n  display:flex;\r\n  font-size:14px;\r\n  color:#FFFFFFFF;\r\n  justify-content:center;\r\n  justify-content: start;\r\n  margin: 15px;\r\n  width: 20vw;\r\n`;\r\n\r\nconst BrandGroup = styled.div`\r\n  display:flex;\r\n  justify-content:space-around;\r\n  align-items: center;\r\n  padding-right: 12px;\r\n  > img {\r\n    :nth-child(1) {\r\n      margin-right:5px;\r\n    }\r\n    width:40px;\r\n    height:40px;\r\n  }\r\n`;\r\n\r\nconst InfoGroup = styled.div`\r\n  display:flex;\r\n  flex-direction:column;\r\n  border-left:1px solid #FFFFFFFF;\r\n  margin-left:5px;\r\n  padding-left: 15px;\r\n  > p > img {\r\n    width:20px;\r\n    height:20px;    \r\n  };\r\n\r\n`;\r\n\r\nconst Informtion = styled.p`\r\n  display:flex;\r\n  > span {\r\n    margin-left:5px;\r\n  };\r\n`;\r\n\r\nconst MainWrapper = styled.div`\r\n  position:relative;\r\n  display:flex;\r\n  bottom: 5vh;\r\n  flex-wrap: wrap;\r\n  justify-content:center;\r\n  width: calc(100% - 250px);\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`;\r\n\r\nconst InfoWrapper = styled.div`\r\n  width:300px;\r\n  height:420px;\r\n  margin: 10px 15px;\r\n  background: #FFF7F7F7;  \r\n  > img {\r\n    width:100%;\r\n    height:90%\r\n  }\r\n`;\r\n\r\nconst RoomDescription = styled.div`\r\n    padding-top: 5px;\r\n    padding-left: 10px;\r\n`;\r\n\r\nconst RoomInfo = ({ imageUrl, name, price, holidayPrice }) => {\r\n  return (\r\n    <InfoWrapper>\r\n      <img src={imageUrl} alt={name} />\r\n      <RoomDescription>{name}</RoomDescription>\r\n\r\n    </InfoWrapper>\r\n\r\n  )\r\n}\r\n\r\n\r\nfunction App() {\r\n  const [roomItems, setRoomItem] = useState([]);\r\n  const [selectRoom, setSelectRoom] = useState(0);\r\n  useEffect(() => {\r\n    if (roomItems.length === 0) {\r\n      GetResquest({ \"url\": \"https://challenge.thef2e.com/api/thef2e2019/stage6/rooms\" }).then((response) => {\r\n        console.log(response);\r\n        if (response.data.success) {\r\n          setRoomItem(response.data.items);\r\n\r\n        } else {\r\n\r\n        }\r\n      })\r\n    }\r\n\r\n  })\r\n\r\n  return (\r\n    <ContainerWrapper>\r\n      <TopWrapper imageUrl={roomItems.length > 0 && roomItems[2].imageUrl}>\r\n        <Logo>White Space</Logo>\r\n        <HotelInfoWrapper>\r\n          <BrandGroup>\r\n            <img src={instagram} />\r\n            <img src={facebook} />\r\n          </BrandGroup>\r\n\r\n          <InfoGroup>\r\n              <Informtion><img src={home} /> <span>02-17264937</span></Informtion>\r\n              <Informtion><img src={envelope} /><span>whitespace@whitespace.com.tw</span></Informtion>\r\n              <Informtion><img src={phone} /><span>台北市羅斯福路十段30號</span></Informtion>\r\n          </InfoGroup>\r\n\r\n\r\n        </HotelInfoWrapper>\r\n\r\n      </TopWrapper>\r\n      <MainWrapper>\r\n        {\r\n          roomItems.map((item, index) => {\r\n            return (\r\n              <RoomInfo key={index} imageUrl={item.imageUrl} name={item.name}>\r\n              </RoomInfo>\r\n            )\r\n          })\r\n        }\r\n      </MainWrapper>\r\n    </ContainerWrapper>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}